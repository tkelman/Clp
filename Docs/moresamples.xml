<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="moreexamples">
<title>
More Samples
</title>
<section>
<title>CLP's Samples Directory</title>
<para>
The CLP dsitribution includes a number of <filename>.cpp</filename> sample files.
Users are encouraged to use them as starting points for their own CLP projects.
The files can be found in the <filename>COIN/Clp/Samples</filename> directory.
For the latest information on compiling and running these samples, please see
the file <filename>COIN/Clp/Samples/INSTALL</filename>.  Below is a list of
some of the most useful sample files with a short description for each file.
</para>
<table frame="none">
  <title>Contents of the Samples directory</title>
  <tgroup cols="2">
    <thead>
      <row>
        <entry align="left" valign="bottom">
	Filename&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	</entry>
        <entry align="left" valign="bottom">
	Description
	</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry align="left" valign="top">
	<ulink url="&cvsweb;&clpsamplesdir;minimum.cpp"><filename>minimum.cpp</filename></ulink>
	</entry>
        <entry align="left" valign="top">
	This is a CLP &quot;Hello, world&quot; program.  It reads an MPS file,
	and solves the problem.
	</entry>
      </row>
      <row>
        <entry align="left" valign="top">
	<ulink url="&cvsweb;&clpsamplesdir;defaults.cpp"><filename>defaults.cpp</filename></ulink>
	</entry>
        <entry align="left" valign="top">
	This is one of the simpler driver programs available.  It sets
	tolerances to defaults and is a good place to find straightforward uses
	of &quot;set&quot; and	&quot;get&quot; methods.  It also prints out full
	MPS-like solutions.
	</entry>
      </row>
      <row>
        <entry align="left" valign="top">
	<ulink url="&cvsweb;&clpsamplesdir;driver.cpp"><filename>driver.cpp</filename></ulink>
	</entry>
        <entry align="left" valign="top">
	This is designed to be a file that a user could modify to get a useful
	driver program for his or her project.  In particular, it demonstrates
	the use of CLP's  presolve functionality.
	</entry>
      </row>
      <row>
        <entry align="left" valign="top">
	<ulink url="&cvsweb;&clpsamplesdir;piece.cpp"><filename>piece.cpp</filename></ulink>
	</entry>
        <entry align="left" valign="top">
	This simple example takes a matrix read in by
	<classname>CoinMpsIo</classname> (can be used to read in MPS files
	without a solver), deletes every second column and solves the
	resulting problem.
	</entry>
      </row>
      <row>
        <entry align="left" valign="top">
	<ulink url="&cvsweb;&clpsamplesdir;network.cpp"><filename>network.cpp</filename></ulink>
	</entry>
        <entry align="left" valign="top">
	This shows the use of non-standard matrices and how to load a problem
	without the use of MPS files.
	</entry>
      </row>
      <row>
        <entry align="left" valign="top">
	<ulink url="&cvsweb;&clpsamplesdir;decompose.cpp"><filename>decompose.cpp</filename></ulink>
	</entry>
        <entry align="left" valign="top">
	This does full Dantzig-Wolfe decomposition.  It illustrates 
	the use of many models, adding columns, et cetera.
	</entry>
      </row>
      <row>
        <entry align="left" valign="top">
	<ulink url="&cvsweb;&clpsamplesdir;sprint.cpp"><filename>sprint.cpp</filename></ulink>
	</entry>
        <entry align="left" valign="top">
	This solves a long, thin problem by solving smaller subsets.  It is a
	simplified version of work done by one of the authors on aircrew
	scheduling problems.  It shows the use of two models and their
	synchronization.  A more general version can be found in
	<filename>COIN/Clp/ClpSolve.cpp</filename>
	</entry>
      </row>
      <row>
        <entry align="left" valign="top">
	<ulink url="&cvsweb;&clpsamplesdir;sprint2.cpp"><filename>sprint2.cpp</filename></ulink>
	</entry>
        <entry align="left" valign="top">
	This is similar to <filename>sprint.cpp</filename> but is designed for
	solving large problems with little choice.  The idea is that if
	relatively few variables are fixed, presolve can greatly reduce the
	problem size so that a series of solves can get close to the optimal
	solution much faster than would a na&iuml;ve solve of the full problem.
	</entry>
      </row>
    </tbody>
  </tgroup>
</table>
</section>
<section>
<title>Common CLP Tasks in the Samples</title>
<para>
Below is a listing of a number of common CLP tasks, such as loading a problem
from an MPS file, matched with a list of each Sample file which illustrates the
performance of a given task.
</para>
<table frame="none">
  <title>Contents of the Samples directory</title>
  <tgroup cols="3">
    <thead>
      <row>
        <entry align="left" valign="bottom">
	CLP Task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	</entry>
	<entry>
	Method(s)
	</entry>
        <entry align="left" valign="bottom">
	Sample(s)
	</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
	Read problem from MPS file
	</entry>
        <entry>
	readMps
	</entry>
        <entry>
	
	</entry>
      </row>
      <row>
        <entry>
	
	</entry>
        <entry>
	
	</entry>
        <entry>
	
	</entry>
      </row>
    </tbody>
  </tgroup>
</table>

</section>
</chapter>