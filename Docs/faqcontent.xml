<?xml version="1.0" encoding="ISO-8859-1"?>
<qandaentry>
  <question>
  <para>
  What is <ulink url="http://www.coin-or.org/Clp/">CLP</ulink>?
  </para>
  </question>
  <answer>
  <para>
  (DN 08/27/04) The <ulink url="http://www.coin-or.org/">COIN-OR</ulink> LP code
  is designed to be a high quality Simplex code provided under the terms of the
  <ulink url="http://opensource.org/licenses/cpl.php">Common Public License</ulink>.
  CLP is written in C++, and is primarily intended to be used as a callable
  library (though a rudimentary stand-alone executable exists).
  The first release was version .90.  The current release is version .99.9.
  </para>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  What are some of the features of CLP?
  </para>
  </question>
  <answer>
  <para>
  (DN 08/27/04) CLP includes primal and dual Simplex solvers.  Both dual and primal algorithms
  can use matrix storage methods provided by the user (0-1 and network matrices
  are already supported in addition the default sparse matrix). The dual algorithm
  has Dantzig and Steepest edge row pivot choices; new ones may be provided by
  the user. The same is true for the column pivot choice of the primal algorithm.
  The primal can also use a non linear cost which should work for piecewise
  linear convex functions.  CLP also includes a barrier method for solving LPs.
  </para>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  How do I obtain and install CLP?
  </para>
  </question>
  <answer>
  <para>
  (DN 08/27/04) Please see the
  <ulink url="http://www.coin-or.org/faqs.html/">COIN-OR FAQ</ulink>
  for details on how to
  <ulink url="http://www.coin-or.org/faqs.html/#ObtainSrcCode">obtain</ulink>
  and
  <ulink url="http://www.coin-or.org/faqs.html/#BuildCode">install</ulink>
  COIN-OR modules.
  </para>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  Is CLP reliable?
  </para>
  </question>
  <answer>
  <para>
  (DN 09/07/04) CLP has been tested on many problems of up to 1.5 million
  constraints and has shown itself as reliable as OSL. It is also being tested
  in the context of
  <ulink url="http://www.coin-or.org/faqs.html#SBB">SBB</ulink>
  (&quot;Simple Branch and Bound&quot;, which is used to solve integer
  programs, but more testing is needed before it can get to version 1.0.
  </para>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  On which platforms does CLP run?    
  </para>
  </question>
  <answer>
  <para>
  (DN 08/27/04) CLP compiles and has been tested (to varying degrees) on the following
  platforms:
  </para>
  <itemizedlist>
  <listitem>
  <para>
  Linux using g++ version 3.1.1 (or later).
  </para>
  </listitem>
  <listitem>
  <para>
  Windows using Microsoft Visual C++ 6
  </para>
  </listitem>
  <listitem>
  <para>
  Windows using cygwin
  </para>
  </listitem>
  <listitem>
  <para>
  AIX using xIC (not supported in the current Makefile)
  </para>
  </listitem>
  </itemizedlist>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  Is there any documentation for CLP?  
  </para>
  </question>
  <answer>
  <para>
  (DN 08/27/04) A User Guide should be available in time for the release of version 1.0 of CLP.
  Also available is a list of
  <ulink url="http://www.coin-or.org/Doxygen/Clp/">CLP class descriptions</ulink>.
  More on CLP documentation is available on the
  <ulink url="http://www.coin-or.org/Clp/documentation.html">CLP documentation webpage</ulink>.
  </para>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  Is CLP as fast as OSL?
  </para>
  </question>
  <answer>
  <para>
   (DN 08/27/04) It uses sparse matrix techniques designed for very large
   problems. The design criteria were for it not to be too slow. Some speed
   has been sacrificed to make the code less opaque than OSL (not
   difficult!).
  </para>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  When will version 1.0 of CLP be available?  
  </para>
  </question>
  <answer>
  <para>
  (DN 08/27/04) It is expected that version 1.0 will be released in time for the 2004
  <ulink url="http://www.informs.org">INFORMS</ulink>
  <ulink url="http://www.informs.org/Conf/Denver2004/">Annual Meeting</ulink>
  (24-27 October, 2004).
  </para>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  The barrier method sounds interesting, what are some of the details?
  </para>
  </question>
  <answer>
  <para>
  (DN 08/30/04) The CLP barrier method solves convex QPs as well as LPs. In
  general, a barrier method requires implementation of the algorithm, as
  well as a fast Cholesky factorization.  CLP provides the algorithm, and is
  expected to have a reasonable factorization implementation by the release of
  CLP version 1.0.  However, the sparse factorization requires a good ordering
  algorithm, which the user is expected to provide (perhaps a better
  factorization code as well).
  </para>
  </answer>
</qandaentry>
<qandaentry>
  <question>
  <para>
  What can the community do to help?
  </para>
  </question>
  <answer>
  <para>
  (DN 09/09/04) A lot!  A good first step would be to join the CLP
  <ulink url="http://www.coin-or.org/mail.html">mailing lists</ulink>.  Some
  other possibilities:
  </para>
  <itemizedlist>
  <listitem>
  <para>
  Comment on the design
  </para>
  </listitem>
  <listitem>
  <para>
  Break the code, or better yet, mend it.
  </para>
  </listitem>
  <listitem>
  <para>
  Add non-English language support in your own favo(u)rite language.
  </para>
  </listitem>
  <listitem>
  <para>
  Improve the CLP executable.  In particular it would be nice to be able to link
  the executable's online help system with the existing CLP Samples (e.g. entering
  <userinput>presol???</userinput> would give the user references to all
  CLP Sample files which use presolve).
  </para>
  </listitem>
  <listitem>
  <para>
  Implement a dual Simplex method for QPs (quadratic programs)
  </para>
  </listitem>
  <listitem>
  <para>
  Implement a parametric Simplex method
  </para>
  </listitem>
  <listitem>
  <para>
  Implement a true network Simplex method (network matrix and factorization
  are already in place, but the method is not)
  </para>
  </listitem>
  <listitem>
  <para>
  Fill the holes in the barrier method mentioned above.
  </para>
  </listitem>
  </itemizedlist>
  </answer>
</qandaentry>
